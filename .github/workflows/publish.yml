name: Build, Test and Publish to PyPI

# Workflow triggers:
# - Push to main: Runs tests and checks only (no publishing)
# - Pull request to main: Runs tests and checks only (no publishing)
# - Release published: Runs full pipeline including publishing to PyPI
# - Manual workflow dispatch: Runs full pipeline including publishing to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Git tag version to publish (e.g., v0.3.0)'
        required: true
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for dynamic versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get version from git tag
        id: get-version
        run: |
          # Version strategy:
          # - Release/workflow_dispatch: Use the provided tag version
          # - PR/Push to main: Use dev-{commit-hash} for artifact naming
          
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Ensure we're on the right tag
            git checkout $VERSION
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            # Ensure we're on the right tag
            git checkout $VERSION
          else
            # For PRs and pushes to main, use the current commit
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Build version: $VERSION"

      - name: Install dependencies
        run: |
          git describe --tags --dirty --always
          poetry install

      - name: Run linting and formatting checks
        run: |
          poetry run black --check zephflow/ tests/
          poetry run isort --check zephflow/ tests/
          poetry run flake8 zephflow/

      - name: Run type checking
        run: |
          poetry run mypy zephflow/

      - name: Run tests
        run: |
          poetry run pytest tests/ --cov=zephflow --cov-report=term-missing

      - name: Build package
        run: |
          poetry build
          echo "Built package with version: $(poetry version -s)"

      - name: Test local installation
        shell: python
        run: |
          import glob
          import subprocess
          import sys
          
          # Find the wheel file
          wheel_files = glob.glob('dist/*.whl')
          if not wheel_files:
              print("No wheel files found in dist/")
              sys.exit(1)
          
          # Install the wheel
          subprocess.check_call([sys.executable, '-m', 'pip', 'install', wheel_files[0]])
          
          # Test import
          import zephflow
          print(f'Installed version: {zephflow.__version__}')

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.get-version.outputs.version }}
          path: dist/

  test-on-multiple-platforms:
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.8', '3.9', '3.10', '3.11', '3.12' ]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build-and-test.outputs.version }}
          path: dist/

      - name: Test installation from wheel
        shell: python
        run: |
          import glob
          import subprocess
          import sys
          
          # Find the wheel file
          wheel_files = glob.glob('dist/*.whl')
          if not wheel_files:
              print("No wheel files found in dist/")
              sys.exit(1)
          
          # Install the wheel
          subprocess.check_call([sys.executable, '-m', 'pip', 'install', wheel_files[0]])
          
          # Test import
          import zephflow
          print(f'ZephFlow version: {zephflow.__version__}')

  publish-to-testpypi:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [ build-and-test, test-on-multiple-platforms ]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build-and-test.outputs.version }}
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Check package metadata
        run: |
          echo "Checking package contents and metadata..."
          twine check dist/*

      - name: Inspect package metadata
        run: |
          python -m pip install pkginfo
          python -c "
          import pkginfo
          import glob
          wheel_files = glob.glob('dist/*.whl')
          if wheel_files:
              wheel = pkginfo.Wheel(wheel_files[0])
              print('Package metadata:')
              for attr in ['name', 'version', 'summary', 'home_page', 'author', 'author_email', 'license', 'classifiers', 'requires_python']:
                  print(f'{attr}: {getattr(wheel, attr, None)}')
          "

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          # Check what we're publishing
          echo "Files to publish:"
          ls -la dist/
          
          # Upload to TestPyPI with verbose output
          twine upload --verbose --skip-existing dist/*

  verify-testpypi-installation:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [ build-and-test, publish-to-testpypi ]
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Wait for TestPyPI propagation
        shell: python
        run: |
          import time
          print("Waiting 60 seconds for TestPyPI propagation...")
          time.sleep(60)

      - name: Install from TestPyPI
        shell: python
        run: |
          import subprocess
          import sys
          import os
          
          version = os.environ['VERSION']
          if version.startswith('v'):
              version = version[1:]  # Remove 'v' prefix
          
          subprocess.check_call([
              sys.executable, '-m', 'pip', 'install',
              '--index-url', 'https://test.pypi.org/simple/',
              '--extra-index-url', 'https://pypi.org/simple/',
              f'zephflow=={version}'
          ])
        env:
          VERSION: ${{ needs.build-and-test.outputs.version }}

      - name: Verify TestPyPI installation
        shell: python
        run: |
          import zephflow
          print(f'TestPyPI version: {zephflow.__version__}')

  publish-to-pypi:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [ build-and-test, test-on-multiple-platforms, verify-testpypi-installation ]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build-and-test.outputs.version }}
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Check what we're publishing
          echo "Files to publish:"
          ls -la dist/
          
          # Upload to PyPI
          twine upload --skip-existing dist/*

  verify-pypi-installation:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [ build-and-test, publish-to-pypi ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.8', '3.9', '3.10', '3.11', '3.12' ]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Wait for PyPI propagation
        shell: python
        run: |
          import time
          print("Waiting 60 seconds for PyPI propagation...")
          time.sleep(60)

      - name: Install from PyPI
        shell: python
        run: |
          import subprocess
          import sys
          import os
          
          version = os.environ['VERSION']
          if version.startswith('v'):
              version = version[1:]  # Remove 'v' prefix
          
          subprocess.check_call([
              sys.executable, '-m', 'pip', 'install',
              f'zephflow=={version}'
          ])
        env:
          VERSION: ${{ needs.build-and-test.outputs.version }}

      - name: Verify PyPI installation
        shell: python
        run: |
          import zephflow
          print(f'PyPI version: {zephflow.__version__}')